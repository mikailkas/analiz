# 📊 TCMB EVDS API ile Türkiye Ekonomik Döngü Analizi
# Google Colab için hazırlanmıştır.
!pip install openpyxl matplotlib pandas seaborn plotly scipy pillow --quiet
import os
import io
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.subplots as sp
import requests
import json
from plotly.subplots import make_subplots
from scipy.signal import savgol_filter
from datetime import datetime, timedelta
from openpyxl.drawing.image import Image as XLImage
from openpyxl import load_workbook
import warnings
warnings.filterwarnings('ignore')

# ==============================
# 1. API KEY AYARI VE KONFİGÜRASYON
# ==============================
api_key = "fylcsyNNCR"   # TCMB EVDS API key
headers = {"key": api_key}  # Sadece key gönderiliyor

# Türkçe karakterleri matplotlib için ayarla
plt.rcParams['font.family'] = ['DejaVu Sans']
plt.rcParams['figure.figsize'] = (15, 10)
plt.style.use('seaborn-v0_8')
# ==============================
# 2. EKONOMİK DÖNGÜ SERİLERİNİ TANIMLA (KILAVUZA GÖRE)
# ==============================
# KILAVUZDA OLAN SERİLER KULLANILDI
series_config = {
    "TÜFE Aylık (%)": {
        "code": "TP.FG.J0",
        "frequency": "5",  # Aylık
        "scale": 1
    },
    "TÜFE Yıllık (%)": {
        "code": "TP.FG.J0-3",
        "frequency": "5",  # Aylık
        "scale": 1
    },
    "Politika Faizi (%)": {
        "code": "TP.TRY.MT04",
        "frequency": "6",  # Aylık
        "scale": 1
    },
    "İşsizlik Oranı (%)": {
        "code": "TP.TIG08",
        "frequency": "1",  # 3 aylık
        "scale": 1
    },
    "İstihdam Oranı (%)": {
        "code": "TP.TIG07",
        "frequency": "1",  # 3 aylık
        "scale": 1
    },
    "Sanayi Üretim Endeksi": {
        "code": "TP.TSANAYMT2021.Y14",
        "frequency": "6",  # Aylık
        "scale": 0.01  # Milyon -> birim
    },
    "Kapasite Kullanım (%)": {
        "code": "TP.KKO2.IS.TOP",
        "frequency": "5",  # Aylık
        "scale": 1
    },
    "Tüketici Güven Endeksi": {
        "code": "TP.TG2.Y01",
        "frequency": "5",  # Aylık
        "scale": 1  # Milyon -> birim
    },
    "Reel Kesim Güven Endeksi": {
        "code": "TP.GY1.N2",
        "frequency": "5",  # Aylık
        "scale": 1
    },
    "USD/TL": {
        "code": "TP.DK.USD.S.YTL",
        "frequency": "1",  # Aylık
        "scale": 1  # Bin -> birim
    },
    "BIST 100": {
        "code": "TP.MK.F.BILESIK",
        "frequency": "1",  # Aylık
        "scale": 1
    },
    "Toplam Kredi Hacmi": {
        "code": "TP.KREDI.L001",
        "frequency": "5",  # Aylık
        "scale": 0.000001  # Milyon TL -> TL
    },
    "İhracat": {
        "code": "TP.IHRACATBEC.9999",
        "frequency": "5",  # Aylık
        "scale": 0.000001  # Milyon $ -> $
    },
    "İthalat": {
        "code": "TP.ITHALATBEC.9999",
        "frequency": "5",  # Aylık
        "scale": 0.000001  # Milyon $ -> $
    },
}

# ==============================
# 3. VERİLERİ ÇEK VE TEMİZLE (TAMAMEN YENİLENDİ)
# ==============================
def try_get_series(code, start_date, end_date, frequency="1"):
    """EVDS API'den tek bir seri için veri çeker (tarih formatı sorununu çözer)"""
    try:
        base_url = "https://evds2.tcmb.gov.tr/service/evds/"
        url = f"{base_url}series={code}&startDate={start_date}&endDate={end_date}&type=json&frequency={frequency}"
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            try:
                data = response.json()
                
                if isinstance(data, dict) and 'error' in data:
                    print(f"❌ API Hatası: {data['error']}")
                    return None
                
                if 'items' in data and len(data['items']) > 0:
                    df = pd.DataFrame(data['items'])
                    
                    # Tarih sütununu esnek şekilde çevir (ÇÖZÜM)
                    if 'Tarih' in df.columns:
                        # Farklı formatları dene
                        for fmt in ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y', '%Y-%m', '%Y-%m-%d %H:%M:%S']:
                            try:
                                df['Tarih'] = pd.to_datetime(df['Tarih'], format=fmt)
                                break
                            except:
                                continue
                        else:
                            # Hiçbiri uyşmazsa pandas'a bırak
                            df['Tarih'] = pd.to_datetime(df['Tarih'], errors='coerce')
                        
                        df.set_index('Tarih', inplace=True)
                        
                        # Sütun adını düzelt
                        if code.replace('.', '_') in df.columns:
                            return df[[code.replace('.', '_')]]
                        elif code in df.columns:
                            return df[[code]]
                    else:
                        print(f"❌ 'Tarih' sütunu bulunamadı. Mevcut: {list(df.columns)}")
                else:
                    print(f"❌ Veri bulunamadı. Yanıt: {data}")
            except json.JSONDecodeError:
                print(f"❌ JSON hatası: {response.text}")
        else:
            print(f"❌ HTTP Hatası: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"❌ Genel Hata: {e}")
    return None

def fetch_economic_data(series_config, start_date="01-01-2000", end_date="18-08-2025"):
    """Ekonomik verileri çeker ve doğru şekilde işler"""
    data = {}
    failed_series = []
    
    for name, config in series_config.items():
        print(f"\n📊 {name} verisi çekiliyor... (kod: {config['code']}, frekans: {config['frequency']})")
        
        df = try_get_series(config['code'], start_date, end_date, config['frequency'])
        
        if df is not None and not df.empty:
            df = df.rename(columns={df.columns[0]: name})
            
            # VERİ TEMİZLİME VE ÖLÇEKLENDİRME
            for col in df.columns:
                # Ondalık ayracı düzeltme (virgül -> nokta)
                df[col] = df[col].astype(str).str.replace(',', '.', regex=True)
                
                # Sayıya çevir
                df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # Ölçeklendirme
                df[col] = df[col] * config['scale']
                
                # NaN değerleri doldur
                df[col] = df[col].fillna(method='ffill').fillna(method='bfill')
            
            # Frekansa göre yeniden örnekleme
            if config['frequency'] == "3":  # 3 aylık -> aylık
                df = df.resample('M').interpolate()
            elif config['frequency'] == "1":  # Aylık
                df = df.resample('M').last()
            # Diğer frekanslar için gerekirse buraya eklenebilir
            
            data[name] = df
            ok_pts = df[name].dropna().shape[0]
            
            # Örnek değer göster
            sample_val = df[name].iloc[-1] if len(df) > 0 else None
            print(f"✅ {name} başarıyla çekildi ve işlendi ({ok_pts} aylık gözlem)")
            if sample_val is not None:
                print(f"📝 Örnek değer: {sample_val:.2f}")
        else:
            print(f"❌ {name} için veri alınamadı.")
            failed_series.append(name)
    
    # Başarılı verileri birleştir
    if data:
        # Tüm indekslerin birleşimi
        all_index = None
        for df in data.values():
            all_index = df.index if all_index is None else all_index.union(df.index)
        
        aligned = {}
        for name, df in data.items():
            aligned[name] = df.reindex(all_index)
        
        df_all = pd.concat(aligned.values(), axis=1)
        df_all = df_all.sort_index()
        
        # Sadece sayısal sütunları seç
        numeric_cols = df_all.select_dtypes(include=[np.number]).columns
        df_all = df_all[numeric_cols]
        
        # Aykırı boşlukları doldur
        df_all = df_all.interpolate(method='linear').fillna(method='bfill').fillna(method='ffill')
        
        print(f"\n✅ Toplam {len(df_all.columns)} seri başarıyla yüklendi ve işlendi")
        print(f"📅 Veri aralığı: {df_all.index.min().strftime('%Y-%m')} - {df_all.index.max().strftime('%Y-%m')}")
        print(f"📊 Sayısal sütunlar: {list(df_all.columns)}")
        
        # Örnek değerleri göster
        print("\n📊 ÖLÇEKLENMİŞ ÖRNEK DEĞERLER:")
        for col in df_all.columns[:5]:  # İlk 5 sütun
            sample_val = df_all[col].iloc[-1] if len(df_all) > 0 else None
            if sample_val is not None:
                print(f"   • {col}: {sample_val:.2f}")
    else:
        df_all = pd.DataFrame()
    
    return df_all, failed_series

# ==============================
# 4. EKONOMİK DÖNGÜ ANALİZİ FONKSİYONLARI (DEĞİŞİKLİK YOK)
# ==============================
def detect_economic_cycles(df):
    """Ekonomik döngü fazlarını tespit eder"""
    growth_indicators = []
    
    # GSYH Büyüme (yoksa atla)
    if "GSYH Büyüme (%)" in df.columns:
        growth_indicators.append(df["GSYH Büyüme (%)"].fillna(0) * 0.3)
    
    # Sanayi üretimi (yıllık % değişim)
    if "Sanayi Üretim Endeksi" in df.columns:
        sue_growth = df["Sanayi Üretim Endeksi"].pct_change(12) * 100
        growth_indicators.append(sue_growth.fillna(0) * 0.25)
    
    # İşsizlik (ters işaret)
    if "İşsizlik Oranı (%)" in df.columns:
        unemployment_inv = -(df["İşsizlik Oranı (%)"] - df["İşsizlik Oranı (%)"].mean())
        growth_indicators.append(unemployment_inv.fillna(0) * 0.2)
    
    # Tüketici güveni (merkezlenmiş)
    if "Tüketici Güven Endeksi" in df.columns:
        consumer_conf = df["Tüketici Güven Endeksi"] - df["Tüketici Güven Endeksi"].mean()
        growth_indicators.append(consumer_conf.fillna(0) * 0.15)
    
    # Kapasite kullanım (merkezlenmiş)
    if "Kapasite Kullanım (%)" in df.columns:
        capacity = df["Kapasite Kullanım (%)"] - df["Kapasite Kullanım (%)"].mean()
        growth_indicators.append(capacity.fillna(0) * 0.1)
    
    if growth_indicators:
        composite_indicator = sum(growth_indicators)
        
        # Düzleştir
        window_len = min(13, max(3, (len(composite_indicator) // 3) | 1))  # tek sayı
        if len(composite_indicator.dropna()) >= window_len:
            composite_smooth = savgol_filter(composite_indicator.fillna(0), window_length=window_len, polyorder=2)
        else:
            composite_smooth = composite_indicator.fillna(0).values
        
        # Fazlar
        phases = []
        for v in composite_smooth:
            if v > 1.5:
                phases.append("Genişleme")
            elif v > 0.5:
                phases.append("Tepe")
            elif v > -1.5:
                phases.append("İyileşme")
            else:
                phases.append("Daralma")
        
        cycle_df = pd.DataFrame({
            'Tarih': df.index,
            'Bileşik_Gösterge': composite_smooth,
            'Döngü_Fazı': phases
        }).set_index('Tarih')
        
        return cycle_df
    return pd.DataFrame()

def analyze_cycle_characteristics(df, cycle_df):
    """Döngü fazlarının özelliklerini analiz eder"""
    if cycle_df.empty or df.empty:
        return {}
    
    analysis_df = df.join(cycle_df, how='inner')
    phase_stats = {}
    
    for phase in ['Genişleme', 'Tepe', 'Daralma', 'İyileşme']:
        phase_data = analysis_df[analysis_df['Döngü_Fazı'] == phase]
        if len(phase_data) > 0:
            stats = {}
            for col in df.columns:
                if col in phase_data.columns and pd.api.types.is_numeric_dtype(phase_data[col]):
                    stats[col] = {
                        'ortalama': phase_data[col].mean(),
                        'std': phase_data[col].std(),
                        'min': phase_data[col].min(),
                        'max': phase_data[col].max()
                    }
            
            phase_stats[phase] = {
                'istatistikler': stats,
                'dönem_sayısı': len(phase_data),
                'toplam_süre_ay': len(phase_data)
            }
    
    return phase_stats

# ==============================
# 5. GRAFİK FONKSİYONLARI (DEĞİŞİKLİK YOK)
# ==============================
def create_economic_dashboard(df, cycle_df):
    """Ekonomik döngü dashboard'u oluşturur (Plotly)"""
    fig = make_subplots(
        rows=4, cols=2,
        subplot_titles=[
            'Bileşik Ekonomik Gösterge & Döngü Fazları',
            'GSYH Büyüme & Sanayi Üretimi',
            'İşsizlik & İstihdam Oranları',
            'Tüketici & Reel Kesim Güven Endeksleri',
            'Enflasyon & Politika Faizi',
            'BIST 100 & Kredi Hacmi',
            'Kapasite Kullanım & PMI',
            'Cari Denge & Dış Ticaret'
        ],
        vertical_spacing=0.06,
        horizontal_spacing=0.1
    )
    
    color_map = {'Genişleme': 'green','Tepe': 'orange','Daralma': 'red','İyileşme': 'blue'}
    
    if not cycle_df.empty:
        fig.add_trace(
            go.Scatter(x=cycle_df.index, y=cycle_df['Bileşik_Gösterge'],
                       mode='lines', name='Bileşik Gösterge',
                       line=dict(width=3, color='black')),
            row=1, col=1
        )
        
        current_phase = None
        start_date = None
        for date, phase in zip(cycle_df.index, cycle_df['Döngü_Fazı']):
            if phase != current_phase:
                if current_phase is not None:
                    fig.add_vrect(x0=start_date, x1=date,
                                  fillcolor=color_map.get(current_phase, 'gray'),
                                  opacity=0.2, layer="below", line_width=0,
                                  row=1, col=1)
                current_phase = phase
                start_date = date
        
        if current_phase is not None:
            fig.add_vrect(x0=start_date, x1=cycle_df.index[-1],
                          fillcolor=color_map.get(current_phase, 'gray'),
                          opacity=0.2, layer="below", line_width=0,
                          row=1, col=1)
    
    graph_configs = [
        (['GSYH Büyüme (%)', 'Sanayi Üretim Endeksi'], 1, 2),
        (['İşsizlik Oranı (%)', 'İstihdam Oranı (%)'], 2, 1),
        (['Tüketici Güven Endeksi', 'Reel Kesim Güven Endeksi'], 2, 2),
        (['TÜFE Yıllık (%)', 'Politika Faizi (%)'], 3, 1),
        (['BIST 100', 'Toplam Kredi Hacmi'], 3, 2),
        (['Kapasite Kullanım (%)', 'İmalat Sanayi PMI'], 4, 1),
        (['Cari Denge/GSYH (%)', 'İhracat'], 4, 2)
    ]
    
    for cols, row, col in graph_configs:
        for series_name in cols:
            if series_name in df.columns:
                fig.add_trace(
                    go.Scatter(x=df.index, y=df[series_name],
                               mode='lines', name=series_name, showlegend=False),
                    row=row, col=col
                )
    
    fig.update_layout(height=1600, title_text="🇹🇷 Türkiye Ekonomik Döngü Analizi Dashboard", title_x=0.5, showlegend=True)
    return fig

def create_cycle_phase_analysis(phase_stats):
    """Döngü fazları analiz grafiği (Polar)"""
    if not phase_stats:
        return None
    
    phases = list(phase_stats.keys())
    key_indicators = ['GSYH Büyüme (%)', 'İşsizlik Oranı (%)', 'Tüketici Güven Endeksi', 'TÜFE Yıllık (%)', 'BIST 100']
    
    fig = go.Figure()
    for phase in phases:
        if 'istatistikler' in phase_stats[phase]:
            values, indicators = [], []
            for indicator in key_indicators:
                if indicator in phase_stats[phase]['istatistikler']:
                    val = phase_stats[phase]['istatistikler'][indicator]['ortalama']
                    values.append(val)
                    indicators.append(indicator)
            
            if values:
                fig.add_trace(go.Scatterpolar(r=values, theta=indicators, fill='toself', name=phase, opacity=0.6))
    
    fig.update_layout(polar=dict(radialaxis=dict(visible=True)), title="Ekonomik Döngü Fazları - Gösterge Analizi", showlegend=True)
    return fig

# ==============================
# 6. RAPOR OLUŞTURMA (DEĞİŞİKLİK YOK)
# ==============================
def generate_economic_report(df, cycle_df, phase_stats):
    """Ekonomik analiz raporu (metin olarak döner; Excel'de Rapor_Metin sayfasına yazılacak)"""
    current_date = datetime.now().strftime("%Y-%m-%d")
    latest_data = df.tail(1)
    
    if not cycle_df.empty:
        current_phase = cycle_df['Döngü_Fazı'].iloc[-1]
        current_indicator = cycle_df['Bileşik_Gösterge'].iloc[-1]
    else:
        current_phase = "Belirsiz"
        current_indicator = 0
    
    report = f"""
📊 TÜRKİYE EKONOMİK DÖNGÜ ANALİZ RAPORU
{'='*50}
📅 Rapor Tarihi: {current_date}
📈 Güncel Ekonomik Faz: {current_phase}
🎯 Bileşik Gösterge Değeri: {current_indicator:.2f}
📋 GÜNCEL EKONOMİK GÖSTERGELER
{'-'*30}
"""
    
    for col in df.columns[:10]:
        if col in latest_data.columns:
            latest_val = latest_data[col].iloc[0]
            if pd.notna(latest_val):
                report += f"• {col}: {latest_val:.2f}\n"
    
    if phase_stats:
        report += f"\n🔄 EKONOMİK DÖNGÜ FAZ ANALİZİ\n{'-'*30}\n"
        for phase, stats in phase_stats.items():
            report += f"\n📌 {phase.upper()} DÖNEMİ:\n"
            report += f"  • Toplam Süre: {stats.get('toplam_süre_ay', 0)} ay\n"
            report += f"  • Gözlem Sayısı: {stats.get('dönem_sayısı', 0)}\n"
            for indicator in ['GSYH Büyüme (%)', 'İşsizlik Oranı (%)', 'TÜFE Yıllık (%)']:
                if indicator in stats.get('istatistikler', {}):
                    avg_val = stats['istatistikler'][indicator]['ortalama']
                    report += f"  • {indicator}: {avg_val:.2f}\n"
    
    report += f"""
💡 EKONOMİK DÖNGÜ ÖNERİLERİ
{'-'*30}
"""
    
    if current_phase == "Genişleme":
        report += "✅ Yatırım fırsatları, istihdam artışı, enflasyon baskısı izlenmeli.\n"
    elif current_phase == "Tepe":
        report += "⚠️ Aşırı ısınma riski, temkinli duruş, faiz artışı olası.\n"
    elif current_phase == "Daralma":
        report += "📉 Nakit yönetimi, maliyet kontrolü, yatırımlar ertelenebilir.\n"
    elif current_phase == "İyileşme":
        report += "🔄 Erken yatırım fırsatları, kademeli iyileşme, iyimserlik artıyor.\n"
    
    return report.strip()

# ==============================
# 7. MATPLOTLIB ÖZET GRAFİK (DEĞİŞİKLİK YOK)
# ==============================
def create_summary_matplotlib_chart(df, cycle_df, save_path=None):
    """Matplotlib ile özet grafik oluşturur (PNG kaydı opsiyonel)"""
    fig, axes = plt.subplots(2, 2, figsize=(20, 15))
    fig.suptitle('🇹🇷 Türkiye Ekonomik Döngü Özeti', fontsize=20, fontweight='bold')
    
    # 1. Bileşik gösterge
    if not cycle_df.empty:
        ax = axes[0, 0]
        ax.plot(cycle_df.index, cycle_df['Bileşik_Gösterge'], linewidth=3, color='black', label='Bileşik Gösterge')
        ax.axhline(y=0, color='gray', linestyle='--', alpha=0.7)
        ax.set_title('Bileşik Ekonomik Gösterge', fontsize=14, fontweight='bold')
        ax.set_ylabel('Gösterge Değeri')
        ax.grid(True, alpha=0.3)
        ax.legend()
        
        phase_colors = {'Genişleme': 'green', 'Tepe': 'orange', 'Daralma': 'red', 'İyileşme': 'blue'}
        current_phase = cycle_df['Döngü_Fazı'].iloc[0]
        start_idx = 0
        for i, phase in enumerate(cycle_df['Döngü_Fazı']):
            if phase != current_phase or i == len(cycle_df) - 1:
                end_idx = i if i != len(cycle_df) - 1 else i + 1
                ax.axvspan(cycle_df.index[start_idx], cycle_df.index[min(end_idx, len(cycle_df)-1)],
                           alpha=0.2, color=phase_colors.get(current_phase, 'gray'))
                current_phase = phase
                start_idx = i
    
    # 2. GSYH & İşsizlik
    ax = axes[0, 1]
    if 'GSYH Büyüme (%)' in df.columns:
        ax.plot(df.index, df['GSYH Büyüme (%)'], label='GSYH Büyüme (%)', color='blue', linewidth=2)
    
    if 'İşsizlik Oranı (%)' in df.columns:
        ax2 = ax.twinx()
        ax2.plot(df.index, df['İşsizlik Oranı (%)'], label='İşsizlik (%)', color='red', linewidth=2)
        ax2.set_ylabel('İşsizlik Oranı (%)', color='red')
        ax2.tick_params(axis='y', labelcolor='red')
    
    ax.set_title('GSYH Büyüme & İşsizlik Oranı', fontsize=14, fontweight='bold')
    ax.set_ylabel('GSYH Büyüme (%)', color='blue')
    ax.tick_params(axis='y', labelcolor='blue')
    ax.grid(True, alpha=0.3)
    
    if 'GSYH Büyüme (%)' in df.columns or 'İşsizlik Oranı (%)' in df.columns:
        ax.legend(loc='upper left')
        if 'İşsizlik Oranı (%)' in df.columns:
            ax2.legend(loc='upper right')
    
    # 3. Enflasyon & Faiz
    ax = axes[1, 0]
    if 'TÜFE Yıllık (%)' in df.columns:
        ax.plot(df.index, df['TÜFE Yıllık (%)'], label='TÜFE Yıllık (%)', color='orange', linewidth=2)
    elif 'TÜFE Aylık (%)' in df.columns:
        ax.plot(df.index, df['TÜFE Aylık (%)'], label='TÜFE Aylık (%)', color='orange', linewidth=2)
    
    if 'Politika Faizi (%)' in df.columns:
        ax.plot(df.index, df['Politika Faizi (%)'], label='Politika Faizi (%)', color='purple', linewidth=2)
    
    ax.set_title('Enflasyon & Politika Faizi', fontsize=14, fontweight='bold')
    ax.set_ylabel('Oran (%)')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 4. Güven endeksleri
    ax = axes[1, 1]
    if 'Tüketici Güven Endeksi' in df.columns:
        ax.plot(df.index, df['Tüketici Güven Endeksi'], label='Tüketici Güveni', color='green', linewidth=2)
    
    if 'Reel Kesim Güven Endeksi' in df.columns:
        ax.plot(df.index, df['Reel Kesim Güven Endeksi'], label='Reel Kesim Güveni', color='brown', linewidth=2)
    
    ax.set_title('Güven Endeksleri', fontsize=14, fontweight='bold')
    ax.set_ylabel('Endeks')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=150, bbox_inches='tight')
    
    plt.show()

def save_composite_plot_png(cycle_df, path):
    """Bileşik göstergeyi tek başına PNG olarak kaydeder."""
    if cycle_df.empty:
        return
    
    plt.figure(figsize=(16,6))
    plt.plot(cycle_df.index, cycle_df['Bileşik_Gösterge'], linewidth=3)
    plt.axhline(y=0, linestyle='--')
    plt.title('Bileşik Ekonomik Gösterge')
    plt.ylabel('Değer')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(path, dpi=150, bbox_inches='tight')
    plt.close()

# ==============================
# 8. ANA UYGULAMA (DEĞİŞİKLİK YOK)
# ==============================
def main():
    """Ana uygulama fonksiyonu"""
    print("🚀 Türkiye Ekonomik Döngü Analizi Başlatılıyor...\n")
    
    # 1. Verileri çek
    print("📊 TCMB EVDS verilerinden ekonomik göstergeler çekiliyor...")
    df_economic, failed = fetch_economic_data(series_config)
    
    if df_economic.empty:
        print("❌ Veri çekme başarısız. Lütfen API anahtarını ve seri kodlarını kontrol edin.")
        return None, None, None
    
    if failed:
        print("\n⚠️ Aşağıdaki göstergeler için veri alınamadı:")
        for f in failed:
            print("   -", f)
    
    # 2. Döngü analizi
    print("\n🔄 Ekonomik döngü analizi yapılıyor...")
    cycle_df = detect_economic_cycles(df_economic)
    
    # 3. Faz analizi
    print("📈 Döngü fazları analiz ediliyor...")
    phase_stats = analyze_cycle_characteristics(df_economic, cycle_df)
    
    # 4. Rapor metni
    print("\n📝 Rapor metni hazırlanıyor...")
    report_text = generate_economic_report(df_economic, cycle_df, phase_stats)
    
    # 5. Excel raporu kaydet (grafikleri ve rapor metnini de ekle)
    print("\n💾 Excel raporu hazırlanıyor...")
    excel_file = f"turkiye_ekonomik_dongu_analizi_{datetime.now().strftime('%Y%m%d')}.xlsx"
    
    # Grafik dosyalarını geçici olarak kaydet
    summary_png = "ozet_grafik.png"
    composite_png = "bilesik_gosterge.png"
    
    try:
        create_summary_matplotlib_chart(df_economic, cycle_df, save_path=summary_png)
        save_composite_plot_png(cycle_df, composite_png)
    except Exception as e:
        print("⚠️ Grafik kaydetmede hata:", e)
    
    try:
        with pd.ExcelWriter(excel_file, engine='openpyxl') as writer:
            # Ana veriler
            df_economic.to_excel(writer, sheet_name='Ekonomik_Veriler')
            
            # Döngü analizi
            if not cycle_df.empty:
                cycle_df.to_excel(writer, sheet_name='Dongu_Analizi')
            
            # Faz istatistikleri
            phase_summary_data = {}
            if phase_stats:
                for phase, stats in phase_stats.items():
                    phase_summary_data[phase] = {
                        'Dönem Sayısı (Ay)': stats.get('dönem_sayısı', np.nan),
                        'Toplam Süre (Ay)': stats.get('toplam_süre_ay', np.nan)
                    }
                    
                    if 'istatistikler' in stats:
                        for indicator, values in stats['istatistikler'].items():
                            if isinstance(values, dict) and 'ortalama' in values:
                                phase_summary_data[phase][f'{indicator} (Ort.)'] = values['ortalama']
                                phase_summary_data[phase][f'{indicator} (Std.)'] = values['std']
                                phase_summary_data[phase][f'{indicator} (Min)'] = values['min']
                                phase_summary_data[phase][f'{indicator} (Max)'] = values['max']
                
                if phase_summary_data:
                    phase_summary_df = pd.DataFrame.from_dict(phase_summary_data, orient='index')
                    phase_summary_df.to_excel(writer, sheet_name='Faz_Istatistikleri_Ozet')
            
            # Rapor metni sayfası
            # Çok satırlı hücreye yazıyoruz
            pd.DataFrame({"RAPOR": [report_text]}).to_excel(writer, sheet_name='Rapor_Metin', index=False)
            
            # Şimdilik writer'ı flush et
            writer.book.create_sheet('Grafik_Ozet')
            writer.book.create_sheet('Grafik_Bilesik')
        
        # openpyxl ile resimleri göm
        wb = load_workbook(excel_file)
        
        # Özet grafik
        if os.path.exists(summary_png):
            ws_ozet = wb['Grafik_Ozet']
            img1 = XLImage(summary_png)
            img1.anchor = 'A1'
            ws_ozet.add_image(img1)
        
        # Bileşik grafik
        if os.path.exists(composite_png):
            ws_bil = wb['Grafik_Bilesik']
            img2 = XLImage(composite_png)
            img2.anchor = 'A1'
            ws_bil.add_image(img2)
        
        wb.save(excel_file)
        print(f"✅ Excel dosyası kaydedildi: {excel_file}")
        
        # 6. Colab'den indir (sadece EXCEL)
        try:
            from google.colab import files
            files.download(excel_file)
            print("📥 Excel dosyası indirme başlatıldı.")
        except Exception as e:
            print("💡 Google Colab dışında çalışıyorsunuz veya indirme engellendi. Dosya çalışma dizininde.")
    except Exception as e:
        print(f"❌ Excel raporu kaydedilirken hata oluştu: {e}")
    
    # 7. İnteraktif dashboard göster
    print("\n📊 Ekonomik dashboard oluşturuluyor...")
    dashboard_fig = create_economic_dashboard(df_economic, cycle_df)
    if dashboard_fig:
        dashboard_fig.show()
    
    # 8. Faz analizi grafiği
    if phase_stats:
        print("🎯 Döngü faz analizi grafiği oluşturuluyor...")
        phase_fig = create_cycle_phase_analysis(phase_stats)
        if phase_fig:
            phase_fig.show()
    
    return df_economic, cycle_df, phase_stats

# ==============================
# 9. EK ANALİZ FONKSİYONLARI (DEĞİŞİKLİK YOK)
# ==============================
def correlation_analysis(df):
    """Göstergeler arası korelasyon analizi"""
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    if len(numeric_cols) > 1:
        corr_matrix = df[numeric_cols].corr()
        plt.figure(figsize=(15, 12))
        mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
        sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='RdYlBu_r', center=0,
                    square=True, linewidths=0.5, cbar_kws={"shrink": .8}, fmt='.2f')
        plt.title('Ekonomik Göstergeler Korelasyon Analizi', fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.show()
        return corr_matrix
    else:
        print("⚠️ Korelasyon analizi için yeterli sayısal sütun yok.")
        return None

def economic_forecasting(df, months_ahead=6):
    """Basit trend bazlı tahmin"""
    forecasts = {}
    key_indicators = ['GSYH Büyüme (%)', 'İşsizlik Oranı (%)', 'TÜFE Yıllık (%)', 'Tüketici Güven Endeksi', 'BIST 100']
    
    print(f"\n🔮 {months_ahead} AY ÖNCESİ EKONOMİK GÖSTERGE TAHMİNLERİ")
    print("=" * 60)
    
    for indicator in key_indicators:
        if indicator in df.columns:
            recent = df[indicator].dropna().tail(12)
            if len(recent) >= 3:
                x = np.arange(len(recent))
                slope = np.polyfit(x, recent.values, 1)[0]
                current_value = recent.iloc[-1]
                forecast_value = current_value + slope * months_ahead
                trend = "📈 YÜKSELME" if slope > 0.1 else ("📉 DÜŞME" if slope < -0.1 else "➡️ STABİL")
                
                forecasts[indicator] = {
                    'mevcut_değer': current_value, 
                    'tahmin_değer': forecast_value, 
                    'trend_eğim': slope, 
                    'trend_yön': trend
                }
                
                print(f"\n📊 {indicator}\n   Mevcut: {current_value:.2f} | {months_ahead} Ay Sonra: {forecast_value:.2f} | Trend: {trend} ({slope:.3f})")
    
    if not forecasts:
        print("\n⚠️ Tahmin yapılabilecek yeterli gösterge bulunamadı.")
    
    return forecasts

# ==============================
# 10. ÇALIŞTIR
# ==============================
if __name__ == "__main__":
    print("=" * 80)
    print("🇹🇷 TÜRKİYE EKONOMİK DÖNGÜ ANALİZ SİSTEMİ")
    print("=" * 80)
    print("📊 TCMB EVDS API ile kapsamlı ekonomik analiz")
    print("🔄 Otomatik döngü tespiti ve fazlama")
    print("📈 İnteraktif dashboard ve Excel içinde grafik/rapor")
    print("=" * 80)
    
    # Ana analizi çalıştır
    df_main, cycle_main, phase_stats_main = main()
    
    if df_main is not None and not df_main.empty:
        print("""
🎉 TÜRKİYE EKONOMİK DÖNGÜ ANALİZİ TAMAMLANDI!
📁 Çıktılar:
✅ Excel raporu (.xlsx) — veri, metin rapor, gömülü grafikler (ayrı sayfalarda)
📊 İnteraktif Plotly dashboard
📈 Matplotlib özet grafikleri (Excel'e de eklendi)
        """)
    else:
        print("\n❌ Analiz tamamlanamadı. Lütfen yukarıdaki uyarıları kontrol edin.")
